import { zodToJsonSchema } from 'zod-to-json-schema';
import { Response } from '../Response.js';
import swaggerUiHtml from '../swagger-ui-html.js';
import { isZodSchema } from '../zod/types.js';
export function useOpenAPI({ oasEndpoint, swaggerUIEndpoint, baseOas: oas, swaggerUIOpts, }) {
    const paths = (oas.paths || (oas.paths = {}));
    return {
        onRouterInit(router) {
            if (oasEndpoint) {
                router.route({
                    method: 'GET',
                    path: oasEndpoint,
                    handler: () => Response.json(oas),
                });
            }
            if (swaggerUIEndpoint) {
                router.route({
                    method: 'GET',
                    path: swaggerUIEndpoint,
                    handler: () => new Response(swaggerUiHtml.replace('__SWAGGER_UI_OPTIONS__', JSON.stringify({
                        spec: oas,
                        dom_id: '#swagger-ui',
                        displayOperationId: true,
                        tryItOutEnabled: true,
                        requestSnippetsEnabled: true,
                        displayRequestDuration: true,
                        defaultModelRendering: 'model',
                        defaultModelExpandDepth: 3,
                        defaultModelsExpandDepth: 3,
                        ...swaggerUIOpts,
                    })), {
                        headers: {
                            'Content-Type': 'text/html',
                        },
                    }),
                });
            }
        },
        onRoute({ method, path, operationId, description, tags, schemas }) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (schemas) {
                let pathForOAS = path.replace(/:([^/]+)/g, '{$1}');
                if (!pathForOAS.startsWith('/')) {
                    pathForOAS = `/${pathForOAS}`;
                }
                const pathObj = (paths[pathForOAS] = paths[pathForOAS] || {});
                const lowerCasedMethod = method.toLowerCase();
                pathObj[lowerCasedMethod] = pathObj[lowerCasedMethod] || {};
                const operation = pathObj[lowerCasedMethod];
                operation.operationId = operationId;
                operation.description = description;
                operation.tags = tags;
                if (schemas.responses) {
                    for (const statusCode in schemas.responses) {
                        let responseSchema = schemas.responses[statusCode];
                        if (isZodSchema(responseSchema)) {
                            responseSchema = zodToJsonSchema(responseSchema, {
                                target: 'openApi3',
                            });
                        }
                        operation.responses = operation.responses || {};
                        operation.responses[statusCode] = {
                            description: '',
                            content: {
                                'application/json': {
                                    schema: responseSchema,
                                },
                            },
                        };
                    }
                }
                else {
                    operation.responses = {
                        default: {
                            description: '',
                        },
                    };
                }
                if ((_a = schemas.request) === null || _a === void 0 ? void 0 : _a.headers) {
                    let headersSchema = schemas.request.headers;
                    if (isZodSchema(headersSchema)) {
                        headersSchema = zodToJsonSchema(headersSchema, {
                            target: 'openApi3',
                        });
                    }
                    for (const headerName in headersSchema.properties) {
                        const headerSchema = headersSchema.properties[headerName];
                        operation.parameters = operation.parameters || [];
                        operation.parameters.push({
                            name: headerName,
                            in: 'header',
                            required: (_b = headersSchema.required) === null || _b === void 0 ? void 0 : _b.includes(headerName),
                            schema: headerSchema,
                        });
                    }
                }
                if ((_c = schemas.request) === null || _c === void 0 ? void 0 : _c.params) {
                    let paramsSchema = schemas.request.params;
                    if (isZodSchema(paramsSchema)) {
                        paramsSchema = zodToJsonSchema(paramsSchema, {
                            target: 'openApi3',
                        });
                    }
                    for (const paramName in paramsSchema.properties) {
                        const paramSchema = paramsSchema.properties[paramName];
                        operation.parameters = operation.parameters || [];
                        operation.parameters.push({
                            name: paramName,
                            in: 'path',
                            required: (_d = paramsSchema.required) === null || _d === void 0 ? void 0 : _d.includes(paramName),
                            schema: paramSchema,
                        });
                    }
                }
                if ((_e = schemas.request) === null || _e === void 0 ? void 0 : _e.query) {
                    let queriesSchema = schemas.request.query;
                    if (isZodSchema(queriesSchema)) {
                        queriesSchema = zodToJsonSchema(queriesSchema, {
                            target: 'openApi3',
                        });
                    }
                    for (const queryName in queriesSchema.properties) {
                        const querySchema = queriesSchema.properties[queryName];
                        operation.parameters = operation.parameters || [];
                        operation.parameters.push({
                            name: queryName,
                            in: 'query',
                            required: (_f = queriesSchema.required) === null || _f === void 0 ? void 0 : _f.includes(queryName),
                            schema: querySchema,
                        });
                    }
                }
                if ((_g = schemas.request) === null || _g === void 0 ? void 0 : _g.json) {
                    let requestJsonSchema = schemas.request.json;
                    if (isZodSchema(requestJsonSchema)) {
                        requestJsonSchema = zodToJsonSchema(requestJsonSchema, {
                            target: 'openApi3',
                        });
                    }
                    const requestBody = (operation.requestBody = (operation.requestBody || {}));
                    const requestBodyContent = (requestBody.content = (requestBody.content || {}));
                    requestBodyContent['application/json'] = {
                        schema: requestJsonSchema,
                    };
                }
                if ((_h = schemas.request) === null || _h === void 0 ? void 0 : _h.formData) {
                    const requestBody = (operation.requestBody = (operation.requestBody || {}));
                    const requestBodyContent = (requestBody.content = (requestBody.content || {}));
                    let requestFormDataSchema = schemas.request.formData;
                    if (isZodSchema(requestFormDataSchema)) {
                        requestFormDataSchema = zodToJsonSchema(requestFormDataSchema, {
                            target: 'openApi3',
                        });
                    }
                    requestBodyContent['multipart/form-data'] = {
                        schema: requestFormDataSchema,
                    };
                }
            }
        },
    };
}
